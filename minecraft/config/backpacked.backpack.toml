# Equipable related properties
[equipable]
	# If enabled, backpacks will stay equipped on the player after death (same as the
	# keepInventory game rule), otherwise backpacks will simply drop on the ground like
	# regular items.
	# Valid values: true, false
	keepOnDeath = false
	# If set to true, all equipable slots will be unlocked by default.
	# WARNING: Reverting the option from true to false will cause backpacks to be dropped
	# into the world if the slot they are in is now locked. You have been warned.
	# Valid values: true, false
	unlockAllEquipableSlots = false
	# If true, the first slot will automatically be unlocked by default and for free.
	# Valid values: true, false
	unlockFirstEquipableSlot = true
	# The maximum amount of backpacks that can be equipped by a player. This will determine
	# how many slots will appear when opening the "Equipped Backpacks" menu.
	# Valid range: 1 to 9 (inclusive)
	maxEquipable = 5

	# Cost related properties for equipable slots
	[equipable.unlockCost]
		# Only applicable if paymentType is set to ITEM. This option will control the item used when paying
		# to unlock new slots.
		paymentItem = "minecraft:emerald"
		# A list of values that represent the cost to unlock each slot. For example,
		# if the backpack has 27 inventory slots in total, this list can hold 27 values to
		# specify the cost. Unlocking the first slot, the cost will be the first value
		# in the list. Unlocking the next slot, the cost will be the next value in the
		# list, and so on. This gives full control over the cost to unlock each slot.
		# 
		# If the list does not contain enough values to cover every slot, a value is instead
		# selected from first to last value based on how many slots are unlocked. For example,
		# if the list only contains the values [1, 5] but there are 30 inventory slots in the
		# backpack, then this will be interpreted as the first 15 slots costing 1, and the last
		# 15 slots costing 5. If the values were [1, 3, 10] and again there are 30 inventory slots,
		# then this will be interpreted as the first 10 slots costing 1, the next 10 slots costing 3,
		# and the final 10 slots costing 10.
		customCosts = []
		# If enabled, instead of using a cost that is calculated based on a minCost
		# and maxCost, custom costs allow the cost to be specified manually using
		# a list of values (see customCosts).
		# Valid values: true, false
		useCustomCosts = false
		# The maximum cost to unlock a backpack slot. This value would be the cost
		# when unlocking the final slot in a backpack inventory. The cost to unlock
		# prior slots are interpolated from the minCost to this value, and scaled
		# by the scaleFunction.
		# 
		# Note: This property has no effect if useCustomCosts is set to true
		# Valid range: 1 to 100 (inclusive)
		maxCost = 30
		# The interpolate method to use when calculating the cost of unlocking a slot. The cost
		# of slots increases the more slots that are unlocked. This function determines how steep
		# the price will increase after each slot is unlocked. The interpolated value is calculated
		# using the minCost and maxCost.
		# 
		# Function Descriptions:
		# LINEAR - A constant grow in the cost. Cost will jump by the same value after every slot unlocked.
		# SQUARED - Slowly scales the cost for about half, then cost will increase noticeably for the final half.
		# CUBIC - Very slowly scales the cost for about two thirds, then cost increases sharply for the final third.
		# 
		# Note: This property has no effect if useCustomCosts is set to true
		# 
		# Valid values: LINEAR, SQUARED, CUBIC
		costInterpolateFunction = "LINEAR"
		# The minimum cost to unlock a backpack slot. This value would be the cost
		# when unlocking the first slot in a backpack inventory. The cost to unlock
		# subsequent slots are interpolated from the this value to the maxCost, and
		# scaled by the scaleFunction.
		# 
		# Note: This property has no effect if useCustomCosts is set to true
		# Valid range: 1 to 100 (inclusive)
		minCost = 30
		# The type of payment to use to unlock backpack slots. By default this value is set to EXPERIENCE,
		# which will use the players experience levels are used to unlock new slots. If value is set to
		# ITEM, this will instead consume a specified item from the player's inventory (including anything
		# placed in the backpack) to unlock new slots.
		# Valid values: EXPERIENCE, ITEM
		paymentType = "EXPERIENCE"

# Inventory related properties
[inventory]
	# A list of items that are not allowed inside the inventory of a backpack.
	# Note: It is recommended to ban items that have an inventory as this will create
	# large NBT data and potentially crash the server!
	bannedItems = ["travelersbackpack:custom_travelers_backpack", "pinesbarrels:better_barrel", "quark:seed_pouch", "quark:backpack", "sophisticatedbackpacks:backpack", "sophisticatedbackpacks:iron_backpack", "sophisticatedbackpacks:gold_backpack", "sophisticatedbackpacks:diamond_backpack", "sophisticatedbackpacks:netherite_backpack", "improvedbackpacks:tiny_pocket", "improvedbackpacks:medium_pocket", "improvedbackpacks:large_pocket", "improvedbackpacks:white_backpack", "improvedbackpacks:orange_backpack", "improvedbackpacks:magenta_backpack", "improvedbackpacks:light_blue_backpack", "improvedbackpacks:yellow_backpack", "improvedbackpacks:lime_backpack", "improvedbackpacks:pink_backpack", "improvedbackpacks:gray_backpack", "improvedbackpacks:light_gray_backpack", "improvedbackpacks:cyan_backpack", "improvedbackpacks:purple_backpack", "improvedbackpacks:blue_backpack", "improvedbackpacks:brown_backpack", "improvedbackpacks:green_backpack", "improvedbackpacks:red_backpack", "improvedbackpacks:black_backpack", "immersiveengineering:toolbox", "immersiveengineering:crate", "immersiveengineering:reinforced_crate", "create:white_toolbox", "create:orange_toolbox", "create:magenta_toolbox", "create:light_blue_toolbox", "create:yellow_toolbox", "create:lime_toolbox", "create:pink_toolbox", "create:gray_toolbox", "create:light_gray_toolbox", "create:cyan_toolbox", "create:purple_toolbox", "create:blue_toolbox", "create:brown_toolbox", "create:green_toolbox", "create:red_toolbox", "create:black_toolbox", "mekanism:personal_chest", "supplementaries:sack"]

	# Slots related properties
	[inventory.slots]
		# If set to true, all backpacks slots will be unlocked by default.
		# WARNING: Reverting the option from true to false will cause items to be dropped
		# into the world if the slot they are in is now locked. You have been warned.
		# Valid values: true, false
		unlockAllSlots = false

		# Cost related properties for inventory slots
		[inventory.slots.unlockCost]
			# Only applicable if paymentType is set to ITEM. This option will control the item used when paying
			# to unlock new slots.
			paymentItem = "minecraft:emerald"
			# A list of values that represent the cost to unlock each slot. For example,
			# if the backpack has 27 inventory slots in total, this list can hold 27 values to
			# specify the cost. Unlocking the first slot, the cost will be the first value
			# in the list. Unlocking the next slot, the cost will be the next value in the
			# list, and so on. This gives full control over the cost to unlock each slot.
			# 
			# If the list does not contain enough values to cover every slot, a value is instead
			# selected from first to last value based on how many slots are unlocked. For example,
			# if the list only contains the values [1, 5] but there are 30 inventory slots in the
			# backpack, then this will be interpreted as the first 15 slots costing 1, and the last
			# 15 slots costing 5. If the values were [1, 3, 10] and again there are 30 inventory slots,
			# then this will be interpreted as the first 10 slots costing 1, the next 10 slots costing 3,
			# and the final 10 slots costing 10.
			customCosts = []
			# If enabled, instead of using a cost that is calculated based on a minCost
			# and maxCost, custom costs allow the cost to be specified manually using
			# a list of values (see customCosts).
			# Valid values: true, false
			useCustomCosts = false
			# The maximum cost to unlock a backpack slot. This value would be the cost
			# when unlocking the final slot in a backpack inventory. The cost to unlock
			# prior slots are interpolated from the minCost to this value, and scaled
			# by the scaleFunction.
			# 
			# Note: This property has no effect if useCustomCosts is set to true
			# Valid range: 1 to 100 (inclusive)
			maxCost = 50
			# The interpolate method to use when calculating the cost of unlocking a slot. The cost
			# of slots increases the more slots that are unlocked. This function determines how steep
			# the price will increase after each slot is unlocked. The interpolated value is calculated
			# using the minCost and maxCost.
			# 
			# Function Descriptions:
			# LINEAR - A constant grow in the cost. Cost will jump by the same value after every slot unlocked.
			# SQUARED - Slowly scales the cost for about half, then cost will increase noticeably for the final half.
			# CUBIC - Very slowly scales the cost for about two thirds, then cost increases sharply for the final third.
			# 
			# Note: This property has no effect if useCustomCosts is set to true
			# 
			# Valid values: LINEAR, SQUARED, CUBIC
			costInterpolateFunction = "CUBIC"
			# The minimum cost to unlock a backpack slot. This value would be the cost
			# when unlocking the first slot in a backpack inventory. The cost to unlock
			# subsequent slots are interpolated from the this value to the maxCost, and
			# scaled by the scaleFunction.
			# 
			# Note: This property has no effect if useCustomCosts is set to true
			# Valid range: 1 to 100 (inclusive)
			minCost = 1
			# The type of payment to use to unlock backpack slots. By default this value is set to EXPERIENCE,
			# which will use the players experience levels are used to unlock new slots. If value is set to
			# ITEM, this will instead consume a specified item from the player's inventory (including anything
			# placed in the backpack) to unlock new slots.
			# Valid values: EXPERIENCE, ITEM
			paymentType = "EXPERIENCE"

	# Size related properties
	[inventory.size]
		# The amount of columns in the backpack inventory.
		# WARNING: Larger than 15 columns will start to cut off GUI elements when using auto GUI
		# scale. If you make the size of the backpack smaller, items in the backpack that no
		# longer fit will spawn into the world. Take care when changing this property on a
		# running game/server since the changes will be automatically reloaded upon saving this file.
		# Valid range: 1 to 23 (inclusive)
		columns = 9
		# The amount of rows in the backpack inventory.
		# WARNING: Larger than 6 rows will not fit on some resolutions when using auto GUI scale.
		# If you make the size of the backpack smaller, items in the backpack that no
		# longer fit will spawn into the world. Take care when changing this property on a
		# running game/server since the changes will be automatically reloaded upon saving this file.
		# Valid range: 1 to 11 (inclusive)
		rows = 5

# Cosmetic related properties
[cosmetics]
	# Allows every player to use any backpack cosmetic variant without needing to
	# complete the challenges. Side note, any progress to a challenge will not be
	# tracked while enabled.
	# Valid values: true, false
	unlockAllCosmetics = false
	# If enabled, prevents backpacks from being customised. This will remove the
	# customise button from the backpack inventory
	# Valid values: true, false
	disableCustomisation = false
	# The default cosmetic (model) of the backpack. This should generally be a backpack
	# that is unlocked by default
	defaultCosmetic = "backpacked:standard"
